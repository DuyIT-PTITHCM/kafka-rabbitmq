version: '3'

services:
  # MongoDB service
  mongodb:
    image: mongo:4.4.12
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ./message-broker/rabbitmq/data/:/var/lib/rabbitmq/
        - ./message-broker/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-network
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    ports:
      - "9091:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  kafka3:
    image: wurstmeister/kafka
    container_name: kafka3
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka3
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  expressjs:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: expressjs
    working_dir: /var/www/html
    restart: unless-stopped
    tty: true
    ports:
      - "3000:3000"
    depends_on:
      - kafka
    volumes:
      - ./backend:/var/www/html
    command: npm start
  manager:
    image: sheepkiller/kafka-manager
    ports:
      - 9100:9000
    environment:
      - ZK_HOSTS=zookeeper:2181
    depends_on:
      - zookeeper
networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
